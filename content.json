{"posts":[{"title":"DETR","text":"概要説明 DETR (DEtection TRansformer) は、物体検出（object detection）タスクにおける新しいアプローチとして、2020年に Facebook AI（現 Meta AI）によって発表されたアルゴリズムです。 DETR は、従来の物体検出モデルとは異なり、トランスフォーマーベースのアーキテクチャを使用することで、検出と分類のプロセスを大幅に簡素化しています。 論文：https://arxiv.org/pdf/2005.12872 DETR の特徴 Transformer Architecture 自然言語処理で成果を挙げたTransformerを画像処理に応用しています。 入力画像をエンコーダーで特徴量に変換し、トランスフォーマーデコーダーが物体の位置（bbox）とClass labelを予測できます。 End-to-endのアプローチ 従来の物体検出では、アンカー生成や後処理（NMS: Non-Maximum Suppression）などの手作業のステップが必要でしたが、DETR ではこれらが不要となります。 これにより、シンプルで効率的な学習が可能になっています。 マルチタスク(物体検出と分類を同時に実行) DETR は、画像中の物体の位置を検出し、それらを分類するプロセスを統一されたフレームワーク内で行います。 環境の準備 DETR を動かすには、Python と PyTorch の環境が必要です。以下の手順で準備を進めます。 Python 環境の作成 12345# 仮想環境の作成（例: conda）conda create -n detr_env python=3.9 -yconda activate detr_envPyTorch のインストールPyTorch を CUDA 対応でインストールします（GPU 使用の場合）。 123456コードをコピーする# GPU 用 PyTorch (CUDA 11.7) のインストールpip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu117# CPU 用 PyTorch のインストール（GPU がない場合）pip install torch torchvision torchaudio DETRインストール 早速、Git clone を実行して、確認しましょう。 12345git clone https://github.com/facebookresearch/detr.gitcd detr# 必要なライブラリをインストールpip install -r requirements.txt DETR を使用した推論 それでは、COCO データセットを使用した事前学習済みモデルで物体検出を行います。 detr_inference.py ファイルを作成して推論コードを準備します。 1234567891011121314151617181920212223242526import torchfrom transformers import DetrForObjectDetection, DetrImageProcessorfrom PIL import Imageimport requests# 事前学習済みモデルとプロセッサのロードprocessor = DetrImageProcessor.from_pretrained(&quot;facebook/detr-resnet-50&quot;)model = DetrForObjectDetection.from_pretrained(&quot;facebook/detr-resnet-50&quot;)# 入力画像を用意url = &quot;https://images.unsplash.com/photo-1593642532973-d31b6557fa68&quot;image = Image.open(requests.get(url, stream=True).raw)# 推論inputs = processor(images=image, return_tensors=&quot;pt&quot;)outputs = model(**inputs)# 物体検出結果を取得results = processor.post_process_object_detection(outputs, threshold=0.9, target_sizes=[image.size])# 検出結果を出力for result in results: for score, label, box in zip(result[&quot;scores&quot;], result[&quot;labels&quot;], result[&quot;boxes&quot;]): print(f&quot;Label: {model.config.id2label[label.item()]}, Score: {score.item():.3f}, Box: {box.tolist()}&quot;) 保存して実行します。 1python detr_inference.py DETRのTraining 1python -m torch.distributed.launch --nproc_per_node=1 --use_env main.py --coco_path /workspaces/bev-playground/dataset/coco","link":"2024/12/19/DETR/"},{"title":"add-mermaind","text":"環境セットアップ hexo-filter-mermaid-diagramsのインストール 1npm install hexo-filter-mermaid-diagrams --save Mermaidの_config.ymlの設定 12345mermaid: enable: true version: \"7.1.2\" # Available themes: default | dark | forest | neutral theme: default Mermaidの読み込み hexo-theme-icarus/layout/common/scripts.jsxに以下を追加する 1&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/mermaid/10.4.0/mermaid.min.js\"&gt;&lt;/script&gt; ダイアグラム図作成 フローチャート図 12345graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; graph TD; A--&gt;B; A--&gt;C; B--&gt;D; C--&gt;D; click D \"https://google.com\"; シーケンス図 1234567891011sequenceDiagram participant Alice participant Bob Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts &lt;br/&gt;prevail... John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! sequenceDiagram participant Alice participant Bob Alice-&gt;&gt;John: Hello John, how are you? loop Healthcheck John-&gt;&gt;John: Fight against hypochondria end Note right of John: Rational thoughts prevail... John--&gt;&gt;Alice: Great! John-&gt;&gt;Bob: How about you? Bob--&gt;&gt;John: Jolly good! ガンチャート図 123456789ganttdateFormat YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task :done, des1, 2014-01-06,2014-01-08Active task :active, des2, 2014-01-09, 3dFuture task : des3, after des2, 5dFuture task2 : des4, after des3, 5d gantt dateFormat YYYY-MM-DD title Adding GANTT diagram to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d クラス図 1234567891011121314classDiagramClass01 &lt;|-- AveryLongClass : CoolClass03 *-- Class04Class05 o-- Class06Class07 .. Class08Class09 --&gt; C2 : Where am i?Class09 --* C3Class09 --|&gt; Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaClass08 &lt;--&gt; C2: Cool label classDiagram Class01 &lt;|-- AveryLongClass : Cool Class03 *-- Class04 Class05 o-- Class06 Class07 .. Class08 Class09 --&gt; C2 : Where am i? Class09 --* C3 Class09 --|&gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla Class08 &lt;--&gt; C2: Cool label Gitグラフ 12345678910gitGraph commit commit branch develop commit commit commit checkout main commit commit gitGraph commit commit branch develop commit commit commit checkout main commit commit Quadrant Chart 123456789101112131415quadrantChart title Reach and engagement of campaigns x-axis Low Reach --&gt; High Reach y-axis Low Engagement --&gt; High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved Campaign A: [0.3, 0.6] Campaign B: [0.45, 0.23] Campaign C: [0.57, 0.69] Campaign D: [0.78, 0.34] Campaign E: [0.40, 0.34] Campaign F: [0.35, 0.78] quadrantChart title Reach and engagement of campaigns x-axis Low Reach --&gt; High Reach y-axis Low Engagement --&gt; High Engagement quadrant-1 We should expand quadrant-2 Need to promote quadrant-3 Re-evaluate quadrant-4 May be improved Campaign A: [0.3, 0.6] Campaign B: [0.45, 0.23] Campaign C: [0.57, 0.69] Campaign D: [0.78, 0.34] Campaign E: [0.40, 0.34] Campaign F: [0.35, 0.78] Pie chart diagrams 12345pie title Pets adopted by volunteers \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 pie title Pets adopted by volunteers \"Dogs\" : 386 \"Cats\" : 85 \"Rats\" : 15 フローチャート flowchart A(開始) B(終了) 処理1 C[処理2] D{判断} E[処理2-2] F{{準備}} G1[/外部データ&lt;上にあると入力&gt;/] G2[/外部データ&lt;下にあると出力&gt;/] H[[定義&lt;マクロ&gt;]] I[(データベース)] J1((結合子A)) J2((結合子A')) K1[/ループ開始\\] K2[\\ループ終了条件式/] A --&gt; F F --&gt; K1 K1 --&gt; 処理1 処理1 --&gt; D D --&gt; E &amp; G1 E --&gt; H G1 --&gt; C --&gt; G2 G2 &amp; H --&gt; K2 --&gt; B H -.- J1 J2 --&gt; マクロ内容開始 --- I --- マクロ内容終了 --&gt; J2","link":"2024/12/27/add-mermaind/"},{"title":"bevformer","text":"概要説明","link":"2024/12/27/bevformer/"},{"title":"create-hexo-website","text":"Generate new article Create new post 1hexo new \"first post\" Create a new page on Hexo or Algorithm. 12hexo new page hexohexo new page algorithm Run Hexo server locally 1hexo server Generate the Website 12hexo cleanhexo generate Deploy your Website to Github Push source to public 1hexo deploy Add underline of header Add the commend in markdown 12This text is also text! &lt;!-- New line here... --&gt;---","link":"2024/12/27/create-hexo-website/"},{"title":"install-hexo","text":"Hexo インストール 123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install hexo-theme-icarusのインストール 1npm install -S hexo-theme-icarus hexo-renderer-inferno _config.yml ファイル 1theme: icarus もしくは 1hexo config theme icarus","link":"2024/12/27/install-hexo/"},{"title":"BEVDet","text":"概要説明 マルチカメラの3D 既存技術より優れ キー技術 Image-view Encoder View Transformer","link":"2024/12/28/BEVDet/"},{"title":"CaDDN","text":"概要説明 Categorical Depth Distribution Network for Monocular 3D Object Detection Cody Reading Ali Harakeh Julia Chae Steven L. Waslander University of Toronto Robotics Institute https://arxiv.org/pdf/2103.01100","link":"2024/12/28/CaDDN/"},{"title":"basic-cnn-models","text":"Dataset 画像 MNIST ImageNet COCO2017 Cityscapes KITTI nuScenes Megaface WaymoOpen 音声 LibriSpeech AudioSet Common Voice Early models モデル 発表年 学会または発表場所 論文タイトル URL AlexNet 2012 NIPS 2012 (現NeurIPS) ImageNet Classification with Deep Convolutional Neural Networks AlexNet VGG16 2014 arXiv (未発表) Very Deep Convolutional Networks for Large-Scale Image Recognition VGG16 GoogLeNet 2014 CVPR 2015 (2014年発表) Going Deeper with Convolutions GoogLeNet ResNet 2015 CVPR 2016 (2015年発表) Deep Residual Learning for Image Recognition ResNet DenseNet 2016 CVPR 2017 (2016年発表) Densely Connected Convolutional Networks DenseNet Application models Detection 論文名 発表時間 発表者 発表組織 URL R-CNN 2013/11 Ross Girshick, Jeff Donahue, Trevor Darrell, Jitendra Malik UC Berkeley link Fast R-CNN 2015/04 Ross Girshick Microsoft Research link Faster R-CNN 2015/06 Shaoqing Ren, Kaiming He, Ross Girshick, Jian Sun Microsoft Research link YOLO 2015/06 Joseph Redmon, Santosh Divvala, Ross Girshick, Ali Farhadi University of Washington, Allen Institute for AI link SSD 2015/12 Wei Liu, Dragomir Anguelov, Dumitru Erhan, Christian Szegedy, Scott Reed, Cheng-Yang Fu, Alexander C. Berg Google Research, University of North Carolina, Chapel Hill link RetinaNet 2017/08 Tsung-Yi Lin, Priya Goyal, Ross Girshick, Kaiming He, Piotr Dollár Facebook AI Research link YOLOv3 2018/4 Joseph Redmon, Ali Farhadi University of Washington, Allen Institute for AI link CenterNet 2019/05 Xingyi Zhou, Dequan Wang, Philipp Krähenbühl UT Austin link YOLOv4 2020/04 Alexey Bochkovskiy, Chien-Yao Wang, Hong-Yuan Mark Liao Independent &amp; Academia Sinica link YOLOv5 2020/10 Ultralytics Team Ultralytics link EfficientDet 2020/03 Mingxing Tan, Ruoming Pang, Quoc V. Le Google Research link DETR 2020/05 Nicolas Carion, Francisco Massa, Gabriel Synnaeve, et al. Facebook AI Research link Deformable DETR 2020/10 Xiaohang Zeng, Xizhou Zhu, Yue Cao, et al. Microsoft Research Asia link Segmentation 論文名 発表時間 発表者 発表組織 URL FCN 2014/11 Jonathan Long, Evan Shelhamer, Trevor Darrell UC Berkeley link U-Net 2015/05 Olaf Ronneberger, Philipp Fischer, Thomas Brox University of Freiburg link SegNet 2015/11 Vijay Badrinarayanan, Alex Kendall, Roberto Cipolla University of Cambridge link DeepLab 2016/06 Liang-Chieh Chen, George Papandreou, Iasonas Kokkinos, Kevin Murphy, Alan L. Yuille Google DeepMind &amp; University of Maryland link PSPNet 2016/12 Hengshuang Zhao, Jianping Shi, Xiaojuan Qi, Xiaogang Wang, Jiaya Jia Chinese University of Hong Kong link Mask R-CNN 2017/03 Kaiming He, Georgia Gkioxari, Piotr Dollár, Ross Girshick Facebook AI Research link DeepLabv3 2017/09 Liang-Chieh Chen, George Papandreou, Florian Schroff, Hartwig Adam Google Research link Semantic FPN 2018/02 Xiaoxiao Li, Ross Girshick, Kaiming He, Piotr Dollár Facebook AI Research link DeepLabv3+ 2018/03 Liang-Chieh Chen, Yukun Zhu, George Papandreou, Florian Schroff, Hartwig Adam Google Research link HRNet 2019/04 Jingdong Wang, Ke Sun, Tianheng Cheng, Borui Jiang, Chaorui Deng, et al. Microsoft Research Asia link DETR 2020/05 Nicolas Carion, Francisco Massa, et al. Facebook AI Research link ViT (Vision Transformer) 2020/06 Alexey Dosovitskiy, Lucas Beyer, et al. Google Research link PointRend 2020/03 Alexander Kirillov, Yuxin Wu, Kaiming He, Ross Girshick Facebook AI Research link Swin Transformer 2021/03 Ze Liu, Yutong Lin, Yue Cao, et al. Microsoft Research Asia link SegFormer 2021/06 Enze Xie, Wenhai Wang, Zhiding Yu, Anima Anandkumar, Jose M. Alvarez, Ping Luo CUHK &amp; NVIDIA Research link Swin-UNet 2021/07 Hu Cao, Yue Cao, Zheng Zhang, Ming-Hsuan Yang, Ran He, Jian Yang Nanjing University of Science and Technology link MaskFormer 2021/10 Bowen Cheng, Alex Schwing, Alexander Kirillov Facebook AI Research link Segment Anything 2023/04 Alexander Kirillov, Eric Mintun, et al. Meta AI link","link":"2024/12/28/basic-cnn-models/"},{"title":"Basic Deep Learning","text":"Book list of Deep learning 2018年ごろに以下2冊が入門本として勉強しました。 深層学習(岡谷 貴之 著) 2015年 ゼロから作るDeep Learning - Pythonで学ぶディープラーニングの理論と実装(斎藤 康毅 著) 2016年 CNNの基本 Loss関数 Neural Networkは最適なパラメータ(Weightとbias)を見つけるため、学習で損失関数が最小値を取るとき 2乗和誤差 クロースエントロピー誤差 パラメータ更新 https://github.com/j-w-yun/optimizer-visualization SGD(確率的勾配降下法) Momentum 勾配の累積 (モメンタム更新): パラメータの更新: AdaGrad 勾配の累積二乗和: パラメータの更新: Adam 勾配の移動平均 (モーメント計算): バイアス補正: パラメータの更新: 正則化 モデルが過学習（オーバーフィッティング）するのを防ぐため目的にパラメータに何らかの制約を課すことです よく使われる正則化手法は以下です。 制約付き最適化(KKT条件から導く) L2正則化(Ridge回帰) 寄与が小さい重みを抑える L1正則化(Lasso回帰) 寄与が小さい重みをゼロにする Dropout データ拡張 Early Stopping バッチ正則化","link":"2024/12/28/basic-dl/"},{"title":"Math-Euclid","text":"人物 ユークリッド ( Euclid, 紀元前330年 - 紀元前275年頃) は古代ギリシアの数学者です。 『ユークリッド原論』の著者であり、「幾何学の父」と称されます。 実績 『ユークリッド原論』 1～4の公理・公準を述べている 第5公準「平行線公準」 基本概念 公理、定理、公準、命題 三角の内角は180度であるを証明する ユークリッド空間 位相空間 ユークリッド距離 ユークリッド内積 非ユークリッド幾何学 non-Euclidean geometry ユークリッド幾何学の平行線公準が成り立たないとして成立する幾何学である。 結論 楕円幾何学 ユークリッド幾何学（放物幾何学） 双曲幾何学 平行線の数 0本 1本 2本以上 代表的なモデル リーマン球面 ユークリッド平面 擬球面 Ivanovich Lobachevsky(ロシア数学者)：双曲幾何学 Georg Friedrich Bernhard Riemann(ドイツの数学者):楕円幾何学(リーマン球面) ユークリッドの互除法 Euclidean Algorithm 中学受験問題：689と1007の最大公約数はいくつですか？ ユークリッドの除法 Euclidean Division ユークリッドの定理 素数が無限であること ユークリッドの整域","link":"2024/12/29/Math-Euclid/"},{"title":"Math-Pythagoras","text":"ピタゴラス (Pythagoras, 紀元前570年頃-紀元前495年頃) は古代ギリシアの数学者です。 ピタゴラスの定理（直角三角形の三辺の関係を示す）はピタゴラスによる発見されていました。 そういえば、ピタゴラスの定理を証明する方法が、たくさんあると、中高学校でどこかでやったことがあります。 ここでまとめます。 相似による証明 三角比による証明 外接円を用いた証明 正方形を用いた証明 内接円を用いた証明 オイラーの公式を用いた証明 三角関数の微分公式を用いた証明 三角関数の不定積分を用いた証明 三角関数の加法定理を用いた証明 冪級数展開を用いた証明 回転行列を用いた証明 三角関数と双曲線関数を用いた証明","link":"2024/12/29/Math-Pythagoras/"},{"title":"vscode-devcon-1","text":"This text is also text! 必要なツールのインストール VSCode: 公式サイトからインストール Docker Desktop: 公式サイトからインストール VSCode拡張機能 プロジェクト構造の準備 1234567project/├── .devcontainer/│ ├── devcontainer.json│ ├── Dockerfile├── src/│ └── main.py└── requirements.txt 各ファイルの作成 Dockerfileの作成 まず、Dockerfileを作成します。Docker imagesがビルドされます。 [dockerfile]123456789101112131415# DockerfileFROM python:3.10-slim# 必要なツールをインストールRUN apt-get update &amp;&amp; apt-get install -y \\ curl \\ git \\ &amp;&amp; rm -rf /var/lib/apt/lists/*# ワークスペースを設定WORKDIR /workspace# Python環境をセットアップCOPY requirements.txt /workspace/RUN pip install --no-cache-dir -r requirements.txt devcontainer.jsonの作成 次に、devcontainerからdockerイメージをビルドし、Containerを起動するためdevcontainer.jsonで設定します。 マウント設定もここで設定します。 123\"mounts\": [ \"source=${localWorkspaceFolder},target=/workspace,type=bind\" ] [devcontainer.json]12345678910111213141516171819202122// .devcontainer/devcontainer.json{ \"name\": \"Python DevContainer\", \"build\": { \"dockerfile\": \"Dockerfile\", \"context\": \"..\" }, \"settings\": { \"python.pythonPath\": \"/usr/local/bin/python\" }, \"extensions\": [ \"ms-python.python\", \"ms-python.vscode-pylance\" ], \"forwardPorts\": [8000], \"postCreateCommand\": \"pip install --no-cache-dir -r requirements.txt\", \"remoteUser\": \"root\", \"workspaceFolder\": \"/workspace\", \"mounts\": [ \"source=${localWorkspaceFolder},target=/workspace,type=bind\" ] } launch.jsonの作成 Debuggerを使ってデバックするためlaunch.jsonを作成します。 [launch.json]1234567891011121314// .vscode/launch.json{ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Python: Docker Debug\", \"type\": \"python\", \"request\": \"launch\", \"program\": \"${workspaceFolder}/src/main.py\", \"console\": \"integratedTerminal\", \"justMyCode\": true } ] } その他のファイルの作成 requirements.txtの作成 [requirements.txt]12345requests==2.31.0 # HTTPリクエストを送信するためのライブラリnumpy==1.26.0 # 数値計算ライブラリpandas==2.1.1 # データ分析ライブラリscipy==1.11.3 # 科学技術計算ライブラリmatplotlib==3.8.0 # グラフ描画ライブラリ src/main.pyの作成 今回デバックしたいpythonファイルを作成します。 まとめ 以上、Vscode + Devcontainerのdocker containerの中でデバック環境を構築することができました。 必要なLibについて、Dockerfileやrequirements.txtを追加・修正してカスタマイズしてください。","link":"2024/12/30/vscode-devcon-1/"},{"title":"devcon-mmdet3d","text":"This text is also text! ファイルの準備 Dockerfileの作成 Modify Dockerfile as follow. [Dockerfile]123456789101112131415161718192021222324252627282930313233343536373839FROM nvidia/cuda:11.3.1-cudnn8-devel-ubuntu20.04ENV DEBIAN_FRONTEND=noninteractive# Install some basic utilitiesRUN apt-get update &amp;&amp; apt-get install wget -yqRUN apt-get install build-essential g++ gcc -yENV DEBIAN_FRONTEND noninteractiveRUN apt-get install libgl1-mesa-glx libglib2.0-0 -yRUN apt-get install openmpi-bin openmpi-common libopenmpi-dev libgtk2.0-dev git -y# Install condaENV CONDA_DIR /opt/condaRUN wget --quiet https://repo.anaconda.com/miniconda/Miniconda3-py38_23.11.0-1-Linux-x86_64.sh -O ~/miniconda.sh &amp;&amp; \\ /bin/bash ~/miniconda.sh -b -p /opt/condaENV PATH=$CONDA_DIR/bin:$PATHRUN conda install python=3.8### Install pytorchRUN pip install torch==1.9.1+cu111 torchvision==0.10.1+cu111 torchaudio==0.9.1 -f https://download.pytorch.org/whl/torch_stable.html### Pip install mmcv-full in condaRUN /opt/conda/bin/pip install mmcv-full==1.4.0 -f https://download.openmmlab.com/mmcv/dist/cu111/torch1.9.0/index.htmlRUN /opt/conda/bin/pip install mmdet==2.14.0 \\ mmsegmentation==0.14.1 \\ timm \\ Pillow==8.4.0 \\ tqdm \\ torchpack \\ mpi4py==3.0.3 \\ numba==0.48.0 \\ nuscenes-devkit==1.1.9RUN conda install conda-build pyyaml numpy ipython cython typing typing_extensions mkl mkl-include ninja &amp;&amp;\\ /opt/conda/bin/conda clean -yaWORKDIR /root/workspace devcontainer.jsonの作成 Modify devcontainer.json as follow. [devcontainer.json]12345678910111213141516171819202122232425262728293031{ \"name\": \"bev-playground\", \"build\": { \"dockerfile\": \"Dockerfile\", \"context\": \"..\" }, \"remoteUser\": \"root\", \"workspaceFolder\": \"/workspace\", \"remoteEnv\": { \"TRT_LIBPATH\": \"/usr/lib/x86_64-linux-gnu\", \"TRT_OSSPATH\": \"/workspace/TensorRT\" }, \"runArgs\": [ \"--gpus\", \"all\", \"--shm-size\", \"16gb\" ], \"mounts\": [ \"source=${localWorkspaceFolder},target=/workspace,type=bind\", \"source=${localWorkspaceFolder}/dataset/can_bus,target=/workspace/VAD/data/can_bus,type=bind\", \"source=${localWorkspaceFolder}/dataset/nuscenes,target=/workspace/VAD/data/nuscenes,type=bind\", ], \"extensions\": [ \"ms-python.python\", \"ms-python.vscode-pylance\" ], \"settings\": { \"python.defaultInterpreterPath\": \"/opt/conda/bin/python3\" }} Dockerビルド VscodeでReopen containerをクリックして、コンテナをビルドし始めます。 mmdet3dインストール コンテナでは、mmdet3dをインストールします。 [Dockerfile]1234 git clone https://github.com/open-mmlab/mmdetection3d.git &amp;&amp;\\cd mmdetection3d &amp;&amp;\\git checkout -f v0.17.1 &amp;&amp;\\python setup.py develop Troubleshooting mmdet3dをインストールするとき、libやlibのバージョンが合わせない問題が発生しました。（更新予定） 以下のように修正してください。 1234567scikit-image==0.21.0networkx==3.1pandas==2.0.3numba==0.48.0numpy==1.21.1similaritymeasures==1.2.0shaplely==1.8.5","link":"2024/12/31/devcon-mmdet3d/"},{"title":"edu-math","text":"This text is also text! 数学の受験についての心得 小学校から高校まで数学の受験では、以下3点がやれば、高得点が取れるはずです。 冷静に考える 試験の時、そもそも問題の意味がわからない、あるいは、問題が読み間違えた。 あるいは、問題がわかってケアミスで点数が失うという点が挙げられる 基本知識 限られている時間で効率よく基本問題をできるように訓練する必要があります。 問題をカテゴライズすべくところです。 絶対できる問題：ノーミスで100%着実に点数を取る。しかも、熟練しているので早く処理すること 頑張ればできる問題： 80%時間をかけてやること。工夫しながら納得まで理解する とてもムズイ問題（IMOレベルの問題）：上記問題ができた前提で10%の時間をかけてチャレンジすること 推理スキル 数学の問題を解く過程では、推理スキルを養うことができます。大人になっても使う能力です。","link":"2024/12/31/edu-math/"},{"title":"linux-kernel","text":"This text is also text!","link":"2024/12/31/linux-kernel/"},{"title":"宗教と創造との関係","text":"This text is also text! # 文化与科学发展的关系 基督教世界 通过信仰激发对自然规律的探索，逐渐发展出系统性的科学方法，成为近代科学革命的核心。 新教的兴起： 从罗马天主教到新教的演化，经历了多个重要的宗教改革（如16世纪马丁·路德的宗教改革）。 这些改革推动了宗教思想的多样化，也间接促进了科学与文化的自由发展。 不断的自我调整： 基督教通过适应社会需求（如推动教育、科学探索和社会福利），使其在现代科技和社会发展中具有重要的推动力。 伊斯兰世界 在其辉煌时期，将不同文化的知识（如希腊、波斯、印度）融会贯通，为人类文明的进步作出了重要贡献 神与人的关系： 伊斯兰宗教非常强调神与人之间的关系，突出神的绝对权威与控制。这种关系强化了宗教的信仰体系，但也可能限制个人的自主性和创新性。 忽略人与人的关系： 相较于中国文化注重人际关系，或基督教文化在神与人之外也强调伦理与社会责任，伊斯兰文化对人际关系的关注相对较少。 中国传统文化 注重实用性和经验积累，但在符号化、理论化的科学研究上较少涉及，导致在现代科学上进展相对较慢。","link":"2025/01/07/%E5%AE%97%E6%95%99%E3%81%A8%E5%89%B5%E9%80%A0%E3%81%A8%E3%81%AE%E9%96%A2%E4%BF%82/"},{"title":"Raspberry PiでBluetoothスピーカーを鳴らす","text":"This text is also text! Preparation Amazon.co.jpで買ったEWA A106というスピーカーです PulseAudioとPulseAudioのBluetoothスピーカーのモジュールをインストールします。 1sudo apt-get install pulseaudio pulseaudio-module-bluetooth Setting PulseAudioの設定 PulseAudioを設定するため、/etc/pulse/default.paを編集します 1sudo nano /etc/pulse/default.pa ファイルの最後に次の行を追加します。 12# automatically switch to newly-connected devicesload-module module-switch-on-connect bluetooth権限追加 sudoなしでBluetoothが制御できるため、ユーザーをbluetoothグループに入れル必要があります。 12sudo usermod -G bluetooth -a $USERsudo reboot ## 動作 Bluetoothスピーカーをペアリングするためpulseaudioを起動します 1pulseaudio --start bluetoothctlコマンドを起動して以下操作します。 123456789$ bluetoothctlAgent registered[bluetooth]# power onChanging power on succeeded[bluetooth]# scan onDiscovery started・・・[NEW] Device 3D:8F:2B:2E:E4:07 EWA Audio A106・・・ ペアリング pairコマンドでペアリングします 12[bluetooth]# pair 3D:8F:2B:2E:E4:07Attempting to pair with 3D:8F:2B:2E:E4:07 Pairing successfulと出れば成功です。 ついでにtrustコマンドでTrustリストに登録します 123[bluetooth]# trust 3D:8F:2B:2E:E4:07[CHG] Device 3D:8F:2B:2E:E4:07 Trusted: yesChanging 3D:8F:2B:2E:E4:07 trust succeeded connectコマンドでスピーカーに接続します。 123456[bluetooth]# connect 3D:8F:2B:2E:E4:07Attempting to connect to 3D:8F:2B:2E:E4:07[CHG] Device 3D:8F:2B:2E:E4:07 Connected: yesConnection successful[CHG] Device 3D:8F:2B:2E:E4:07 ServicesResolved: yes[EWA Audio A106]# 終了 以下のコマンドを実行してペアリングを終了します。 1[EWA Audio A106]# quit テスト ファイルを再生して音を鳴らして確認しましょう。 1$ aplay /usr/share/sounds/alsa/Front_Center.wav 音量調整 alsamixer コマンドで調整できます。 上下キーで音量を調整でき、F6 キーで出力先（ヘッドホンジャック、HDMI など）を変更できます。 また、M ボタンを押すとミュート/ミュート解除の切り替えができます","link":"2025/01/12/Raspberry-Pi%E3%81%A7Bluetooth%E3%82%B9%E3%83%94%E3%83%BC%E3%82%AB%E3%83%BC%E3%82%92%E9%B3%B4%E3%82%89%E3%81%99/"},{"title":"Raspberry PiでUSBマイクを取り付けて音声を録音させる","text":"This text is also text! Preparation usb マイクを差し入れる前後に lsusbコマンドで出力を確認します。 12345$ lsusbBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hubBus 001 Device 004: ID 08bb:2902 Texas Instruments PCM2902 Audio CodecBus 001 Device 002: ID 2109:3431 VIA Labs, Inc. HubBus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub 以下arecord -lコマンドを実行して確認します。 ALSAからの認識を確認 Linuxのオーディオドライバ「ALSA」から見たUSBマイクの認識 12345$ arecord -l**** List of CAPTURE Hardware Devices ****card 1: Device [USB PnP Sound Device], device 0: USB Audio [USB Audio] Subdevices: 1/1 Subdevice #0: subdevice #0 「card:1、device:0」としてと認識されていることがわかります。 ハードウェア・モジュールの認識確認 123456$ cat /proc/asound/modules 0 snd_bcm2835 1 snd_soc_rpi_simple_soundcard 2 snd_usb_audio 3 vc4 4 vc4 snd_usb_audioの優先順位を一番に上げます。 1234$sudo vi /etc/modprobe.d/alsa-base.confoptions snd slots=snd_usb_audio,snd_bcm2835options snd_usb_audio index=0options snd_bcm2835 index=1 その結果です 123456$ cat /proc/asound/modules 0 snd_usb_audio 1 snd_bcm2835 2 snd_soc_rpi_simple_soundcard 3 vc4 4 vc4 「aplay -L」コマンドを使用すると、ALSAで定義されているすべての PCM（サウンドデバイス） を一覧表示します 123456789101112131415161718192021$ aplay -l**** List of PLAYBACK Hardware Devices ****card 1: Headphones [bcm2835 Headphones], device 0: bcm2835 Headphones [bcm2835 Headphones] Subdevices: 8/8 Subdevice #0: subdevice #0 Subdevice #1: subdevice #1 Subdevice #2: subdevice #2 Subdevice #3: subdevice #3 Subdevice #4: subdevice #4 Subdevice #5: subdevice #5 Subdevice #6: subdevice #6 Subdevice #7: subdevice #7card 2: sndrpihifiberry [snd_rpi_hifiberry_dac], device 0: HifiBerry DAC HiFi pcm5102a-hifi-0 [HifiBerry DAC HiFi pcm5102a-hifi-0] Subdevices: 0/1 Subdevice #0: subdevice #0card 3: vc4hdmi0 [vc4-hdmi-0], device 0: MAI PCM i2s-hifi-0 [MAI PCM i2s-hifi-0] Subdevices: 1/1 Subdevice #0: subdevice #0card 4: vc4hdmi1 [vc4-hdmi-1], device 0: MAI PCM i2s-hifi-0 [MAI PCM i2s-hifi-0] Subdevices: 1/1 Subdevice #0: subdevice #0 123456789101112131415161718$ nano ~/.asoundrcpcm.!default { # サウンドデバイスのデフォルトを設定 type asym # Asym PCM playback { # Playback slave definition pcm { type hw card Headphones # [aplay -L]コマンドで確認したデバイスの名前 device 0 # [aplay -L]コマンドで確認したデバイスの番号 } } capture { # Capture slave definition pcm { type hw card Device # [arecord -L]コマンドで確認したデバイスの名前 device 0 # [arecord -L]コマンドで確認したデバイスの番号 } }} Recording 以下コマンドで録音します。 1arecord test.wav ノイズだらけです。。 【arecordのオプションパラメータ】 -c 1：チャネル数を指定します。(モノラル：1) -d 5：録音時間を指定します。(5秒) -f S16_LE：サンプリングのフォーマットを指定します。(S16_LE) -r 44100：サンプリングレートを指定します。(44100Hz) -t wav：ファイルフォーマットのタイプを指定します。(wav形式) 1arecord -c 1 -d 10 -f S16_LE -r 44100 -t wav record.wav 割ときれいな音が録音できます。 Test 録音ファイルを再生して、音声を確認します。 1aplay test.wav 音声ボリューム ［F4キー］を押して録音の設定画面に切り替えます。 1alsamixer","link":"2025/01/12/Raspberry-Pi%E3%81%A7USB%E3%83%9E%E3%82%A4%E3%82%AF%E3%82%92%E5%8F%96%E3%82%8A%E4%BB%98%E3%81%91%E3%81%A6%E9%9F%B3%E5%A3%B0%E3%82%92%E9%8C%B2%E9%9F%B3%E3%81%95%E3%81%9B%E3%82%8B/"},{"title":"I2Cでディスプレイ接続","text":"This text is also text! 準備 1sudo i2cdetect -y 1 123456789 0 1 2 3 4 5 6 7 8 9 a b c d e f00: -- -- -- -- -- -- -- -- -- -- -- -- --10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --30: -- -- -- -- -- -- -- -- -- -- -- -- 3c -- -- --40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --70: -- -- -- -- -- -- -- -- 基本使い方 1234567891011import boardfrom busio import I2Cfrom adafruit_ssd1306 import SSD1306_I2C# I2Cオブジェクトを正しく初期化i2c = I2C(scl=board.SCL, sda=board.SDA)# display = SSD1306_I2C(128, 64, i2c, addr=0x3C)display.fill(1)display.show()","link":"2025/01/13/I2C%E3%81%A7%E3%83%87%E3%82%A3%E3%82%B9%E3%83%97%E3%83%AC%E3%82%A4%E6%8E%A5%E7%B6%9A/"}],"tags":[{"name":"BEV","slug":"BEV","link":"tags/BEV/"}],"categories":[{"name":"ML","slug":"ML","link":"categories/ML/"},{"name":"Tools","slug":"Tools","link":"categories/Tools/"},{"name":"Trans","slug":"ML/Trans","link":"categories/ML/Trans/"},{"name":"Hexo","slug":"Tools/Hexo","link":"categories/Tools/Hexo/"},{"name":"Cnn","slug":"ML/Cnn","link":"categories/ML/Cnn/"},{"name":"trans","slug":"ML/trans","link":"categories/ML/trans/"},{"name":"Thinking","slug":"Thinking","link":"categories/Thinking/"},{"name":"Vscode","slug":"Tools/Vscode","link":"categories/Tools/Vscode/"},{"name":"Edu","slug":"Edu","link":"categories/Edu/"},{"name":"OS","slug":"OS","link":"categories/OS/"},{"name":"Raspebrry-Pi","slug":"Raspebrry-Pi","link":"categories/Raspebrry-Pi/"},{"name":"Math","slug":"Thinking/Math","link":"categories/Thinking/Math/"},{"name":"Math","slug":"Edu/Math","link":"categories/Edu/Math/"},{"name":"Linux","slug":"OS/Linux","link":"categories/OS/Linux/"}],"pages":[{"title":"Algorithm","text":"Vision-base自動運転研究の遷移（抜粋） Flowchart flowchart LR subgraph 2017. A([Transformer ....]) click A \"/2024/12/19/DETR/\"; end subgraph 2020.. A --&gt; B([DETR ...]) click B \"/2024/12/19/DETR/\"; A --&gt; C([ViT ...]) B --&gt; D([Deformable-DETR .....]) L([LSS ..]) end subgraph 2021.. D --&gt; E([DETR3D ...]) C --&gt; F([SwinTransformer .....]) L --&gt; Ca([CaDDN ...]) Ca --&gt; Be([BEVDet ...]) end subgraph 2022.. E --&gt; G([BEVFormer ...]) G --&gt; H([ST-P3...]) Be --&gt; Be4([BEVDet4D ..]) L --&gt; BeFu([BEVFusion ..]) end subgraph 2023.. H --&gt; I([UniAD...]) G --&gt; I B --&gt; J([MapTR...]) J --&gt; K([VAD...]) I --&gt; K G --&gt; K end 2017 Transformer: Attention Is All You Need 点群ベース VoxelNet: End-to-End Learning for Point Cloud Based 3D Object Detection PointNet PointNet++ Frustrum PointNets VoxelNet PointPillars Basic Models","link":"algorithm/index.html"},{"title":"hexo","text":"Installing Hexo Create Hexo website Adding Mermaind into Hexo","link":"hexo/index.html"},{"title":"math","text":"数学者名 (英語名) 国 生没 主な実績 Note ピタゴラス (Pythagoras) 古代ギリシャ BC570～495 ピタゴラスの定理、数と音楽の調和の研究 link ユークリッド (Euclid) 古代ギリシャ BC330～265 『原論』の執筆、幾何学の体系化 link アルキメデス (Archimedes) 古代ギリシャ BC287～212 浮力の原理、円周率の計算、てこの原理 アル＝フワーリズミ (Al-Khwarizmi) ペルシア 780～850 代数学の基礎、アルゴリズムの概念を提唱 レオナルド・フィボナッチ (Leonardo Fibonacci) イタリア 1170～1240 フィボナッチ数列、インド式数字の普及 ルネ・デカルト (René Descartes) フランス 1596～1650 座標幾何学の創設、デカルト座標系 ジョン・ネイピア (John Napier) スコットランド 1550～1617 対数の発明、ネイピア数の基礎 ジラール・デザルグ (Girard Desargues) フランス 1591～1661 射影幾何学の基礎、デザルグの定理 ピエール・ド・フェルマー (Pierre de Fermat) フランス 1607～1665 フェルマーの小定理、数論の発展 ブレーズ・パスカル (Blaise Pascal) フランス 1623～1662 確率論の基礎、パスカルの三角形 アイザック・ニュートン (Isaac Newton) イギリス 1643～1727 微分積分学の創設、万有引力の法則 ゴットフリート・ライプニッツ (Gottfried Wilhelm Leibniz) ドイツ 1646～1716 微分積分記法の確立、論理学の発展 ヤコブ・ベルヌーイ (Jacob Bernoulli) スイス 1654～1705 確率論と微分方程式の発展 ヨハン・ベルヌーイ (Johann Bernoulli) スイス 1667～1748 微分方程式、変分法の基礎 ブルック・テイラー (Brook Taylor) イギリス 1685～1731 テイラー展開、微積分学の発展 コリン・マクローリン (Colin Maclaurin) スコットランド 1698～1746 マクローリン級数、解析学への貢献 トーマス・ベイズ (Thomas Bayes) イギリス 1702～1761 ベイズの定理、確率論の基礎 レオンハルト・オイラー (Leonhard Euler) スイス 1707～1783 数学記号の標準化、オイラー公式、グラフ理論 ジョゼフ＝ルイ・ラグランジュ (Joseph-Louis Lagrange) フランス 1736～1813 ラグランジュ方程式、変分法 ピエール＝シモン・ラプラス (Pierre-Simon Laplace) フランス 1749～1827 ラプラス変換、確率論、天体力学 ジョセフ・フーリエ (Joseph Fourier) フランス 1768～1830 フーリエ解析、熱伝導方程式 カール・フリードリヒ・ガウス (Carl Friedrich Gauss) ドイツ 1777～1855 数論、ガウス平面、電磁気学への貢献 シメオン・ドニ・ポアソン (Siméon Denis Poisson) フランス 1781～1840 ポアソン分布、電磁気学 ジャン＝ヴィクトル・ポンスレ (Jean-Victor Poncelet) フランス 1788～1867 射影幾何学、ポンスレの定理 エヴァリスト・ガロア (Évariste Galois) フランス 1811～1832 群論の創設、代数方程式の解法の理論 ジョージ・ブール (George Boole) イギリス 1815～1864 ブール代数の発展、論理学と集合論の基礎 ベルンハルト・リーマン (Bernhard Riemann) ドイツ 1826～1866 リーマン幾何学、複素解析の発展 リヒャルト・デデキント (Richard Dedekind) ドイツ 1831～1916 実数の形式化、代数構造の理論 ソフス・リー (Sophus Lie) ノルウェー 1842～1899 リー群、リー代数 ウィリアム・ローワン・ハミルトン (William Rowan Hamilton) アイルランド 1805～1865 四元数、ハミルトン力学 カール・ワイエルシュトラス (Karl Weierstrass) ドイツ 1815～1897 厳密な解析学の基礎 ルートヴィヒ・シロー (Ludwig Sylow) ノルウェー 1832～1918 群論、シローの定理 ゲオルク・カントール (Georg Cantor) ドイツ 1845～1918 集合論の創設、無限の概念の体系化 アンドレイ・マルコフ (Andrey Markov) ロシア 1856～1922 マルコフ連鎖、確率過程の基礎 アルフレッド・ノース・ホワイトヘッド (Alfred North Whitehead) イギリス 1861～1947 数理論理学の発展、『プリンキピア・マテマティカ』 ダフィット・ヒルベルト (David Hilbert) ドイツ 1862～1943 ヒルベルト空間、数学の形式化 アンリ・ルベーグ (Henri Lebesgue) フランス 1875～1941 ルベーグ積分、測度論の基礎 スリニヴァーサ・ラマヌジャン (Srinivasa Ramanujan) インド 1887～1920 数論、多項式恒等式、ラマヌジャン予想 ゴッドフレイ・ハロルド・ハーディ (Godfrey Harold Hardy) イギリス 1877～1947 数論、解析学、ラマヌジャンとの共同研究 ジョン・フォン・ノイマン (John von Neumann) ハンガリー/アメリカ 1903～1957 ゲーム理論、量子力学、コンピュータ科学 クルト・ゲーデル (Kurt Gödel) オーストリア 1906～1978 不完全性定理、数理論理学 アラン・チューリング (Alan Turing) イギリス 1912～1954 計算理論の基礎、チューリングマシン クロード・シャノン (Claude Shannon) アメリカ 1916～2001 情報理論の創設、シャノンのエントロピー","link":"math/index.html"}]}